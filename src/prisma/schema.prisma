// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum InterviewStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum EmailStatus {
  SENT
  FAILED
}

model User {
  id        BigInt    @id @default(dbgenerated()) @db.BigInt
  fullName  String
  email     String    @unique
  password  String?
  role      Role      @default(USER)
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  accounts                Account[]
  interviewsAsInterviewer Interview[]    @relation("Interviewer")
  interviewsAsInterviewee Interview[]    @relation("Interviewee")
  feedbackGiven           Feedback[]     @relation("FeedbackGiven")
  feedbackReceived        Feedback[]     @relation("FeedbackReceived")
  skills                  UserSkill[]
  interests               UserInterest[]
  referralsAsReferrer     Referral[]     @relation("Referrer")
  referralsAsReferred     Referral[]     @relation("Referred")

  referralPoints Int @default(0)
}

model Account {
  id           BigInt    @id @default(dbgenerated()) @db.BigInt
  user         User      @relation(fields: [userId], references: [id])
  userId       BigInt
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@unique([provider, providerId])
}

model Interview {
  id            BigInt          @id @default(dbgenerated()) @db.BigInt
  interviewer   User            @relation("Interviewer", fields: [interviewerId], references: [id])
  interviewerId BigInt
  interviewee   User            @relation("Interviewee", fields: [intervieweeId], references: [id])
  intervieweeId BigInt
  scheduledAt   DateTime
  durationMin   Int
  status        InterviewStatus @default(SCHEDULED)
  meetingLink   String?
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?

  feedbacks Feedback[]
}

model Feedback {
  id          BigInt      @id @default(dbgenerated()) @db.BigInt
  interview   Interview   @relation(fields: [interviewId], references: [id])
  interviewId BigInt
  giver       User        @relation("FeedbackGiven", fields: [giverId], references: [id])
  giverId     BigInt
  receiver    User        @relation("FeedbackReceived", fields: [receiverId], references: [id])
  receiverId  BigInt
  comments    String
  emailStatus EmailStatus @default(SENT)
  rating      Int
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
}

model Skill {
  id    BigInt      @id @default(dbgenerated()) @db.BigInt
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  userId  BigInt
  skillId BigInt
  user    User   @relation(fields: [userId], references: [id])
  skill   Skill  @relation(fields: [skillId], references: [id])
  level   Int?

  @@id([userId, skillId])
}

model Interest {
  id    BigInt         @id @default(dbgenerated()) @db.BigInt
  name  String         @unique
  users UserInterest[]
}

model UserInterest {
  userId     BigInt
  interestId BigInt
  user       User     @relation(fields: [userId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  @@id([userId, interestId])
}

model Referral {
  id           BigInt    @id @default(dbgenerated()) @db.BigInt
  referrer     User      @relation("Referrer", fields: [referrerId], references: [id])
  referrerId   BigInt
  referred     User      @relation("Referred", fields: [referredId], references: [id])
  referredId   BigInt
  referralCode String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
}
